<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jeff Kreeftmeijer</title>
  <link href="https://jeffkreeftmeijer.com/feed.xml" rel="self"/>
  <link href="https://jeffkreeftmeijer.com/"/>
  <updated>2018-11-29T16:53:36+01:00</updated>

  <id>http://jeffkreeftmeijer.com/</id>
  <author>
    <name>Jeff Kreeftmeijer</name>
  </author>

  <entry>
    <title type="html">Consistent terminal colors with 16-ANSI-color Vim themes</title>
    <link href="https://jeffkreeftmeijer.com/vim-16-color/"/>
    <id>https://jeffkreeftmeijer.com/vim-16-color/</id>
    <published>2018-11-29T00:00:00+00:00</published>
    <updated>2018-11-29T16:10:28+01:00</updated>
    <summary>Instead of configuring colors separately for both Vim and the rest of the terminal, limiting Vim’s color scheme to 16 ANSI colors allows setting all color preferences in the terminal’s theme.</summary>
    <content type="html">
      <![CDATA[
      <section id="preamble" aria-label="Preamble"><p>Instead of configuring colors separately for both Vim and the rest of the terminal, limiting Vim’s color scheme to 16 ANSI colors allows setting all color preferences in the terminal’s theme. Doing so results in consistent colors among terminal utilities and a color theme that&#8217;s quick to swap out for another one.</p>
<figure class="image-block"><img src="split.png" alt="Vim and git log in Terminal app, with Dim as the Vim colorscheme, appsignal.terminal as the terminal theme, and SF Mono 14pt (with a line spacing of 1.2) as the font." width="1382" height="800">
<figcaption>Figure 1. Vim and a git log side by side in tmux in Terminal.app. By using <a href="https://github.com/jeffkreeftmeijer/vim-dim">Dim</a> as Vim’s color scheme, all color values are set by the <a href="https://github.com/jeffkreeftmeijer/appsignal.terminal">terminal theme</a> (showing both dark and light mode). The font is SF Mono, 14pt, with a line spacing of 1.2.</figcaption></figure>
<p>I’ve been using <a href="https://github.com/jeffkreeftmeijer/vim-dim">a customized version of</a> Vim’s default color scheme for the last couple of years. Unlike Vim’s default, it exclusively uses 16 ANSI colors by setting each color to a value between 0 and 15. The terminal emulator’s theme sets the specific color values instead of hard coding them into the Vim color scheme and relying on true color support.</p>
<p>By using the terminal theme exclusively, all utilities use the same color values. For example, I don’t configure tmux’s colors, as the green color the terminal theme uses is already a shade I like.</p></section>
<section class="doc-section level-1"><h2 id="terminal-colors-and-ansi-escape-sequences">Terminal colors and ANSI escape sequences</h2><p>Terminal emulators use ANSI escape sequences to&#8211;amongst other things like controlling the cursor’s position&#8211;read the desired text and background color when printing output.</p>
<div class="literal-block"><pre>$ echo -e "\033[31mred\033[m" # Prints “red” in red.</pre></div>
<p>While most terminal emulators, including Apple’s Terminal.app, support true color now, most utilities use one of the main sixteen colors (black, red, green, yellow, blue, magenta, cyan, white, and a <em>high intensity</em> or <em>bright</em> version of each).</p>
<p>For example, git shows diffs with additions in green and deletions in red, and most testing frameworks print green dots for passed tests and red <em>F</em>’s for failures.</p>
<table class="tableblock frame-all grid-all" style="width: 100%;">
<colgroup>
<col style="width: 33.3333%;">
<col style="width: 33.3333%;">
<col style="width: 33.3334%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"></th>
<th class="tableblock halign-left valign-top">Normal</th>
<th class="tableblock halign-left valign-top">Bright</th>
</tr>
</thead>
<tbody>
<tr>
<th class="tableblock halign-left valign-top">Black</th>
<td class="tableblock halign-left valign-top" style="background-color: black;"><span class="white">0</span> </td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><span class="white">8</span> </td>
</tr>
<tr>
<th class="tableblock halign-left valign-top" style="background-color: ;">Red </th>
<td class="tableblock halign-left valign-top" style="background-color: maroon;"><span class="white">1</span> </td>
<td class="tableblock halign-left valign-top" style="background-color: red;">9 </td>
</tr>
<tr>
<th class="tableblock halign-left valign-top" style="background-color: ;">Green </th>
<td class="tableblock halign-left valign-top" style="background-color: green;"><span class="white">2</span> </td>
<td class="tableblock halign-left valign-top" style="background-color: lime;">10 </td>
</tr>
<tr>
<th class="tableblock halign-left valign-top" style="background-color: ;">Yellow </th>
<td class="tableblock halign-left valign-top" style="background-color: olive;"><span class="white">3</span> </td>
<td class="tableblock halign-left valign-top" style="background-color: yellow;">11 </td>
</tr>
<tr>
<th class="tableblock halign-left valign-top" style="background-color: ;">Blue </th>
<td class="tableblock halign-left valign-top" style="background-color: navy;"><span class="white">4</span> </td>
<td class="tableblock halign-left valign-top" style="background-color: blue;">12 </td>
</tr>
<tr>
<th class="tableblock halign-left valign-top" style="background-color: ;">Purple </th>
<td class="tableblock halign-left valign-top" style="background-color: purple;"><span class="white">5</span> </td>
<td class="tableblock halign-left valign-top" style="background-color: fuchsia;">13 </td>
</tr>
<tr>
<th class="tableblock halign-left valign-top" style="background-color: ;">Cyan </th>
<td class="tableblock halign-left valign-top" style="background-color: teal;"><span class="white">6</span> </td>
<td class="tableblock halign-left valign-top" style="background-color: cyan;">14 </td>
</tr>
<tr>
<th class="tableblock halign-left valign-top" style="background-color: ;">White </th>
<td class="tableblock halign-left valign-top" style="background-color: silver;">7 </td>
<td class="tableblock halign-left valign-top" style="background-color: white;">15 </td>
</tr>
</tbody>
</table>
<p>The terminal emulators we use today assign each of these <em>relative</em> named colors with a 24-bit color value. This separates the utility’s <em>intent</em> (“print this error in red”) from the terminal emulator’s <em>styling</em> (“#C31633 is a nice shade of red”). These colors are configurable in your terminal emulator’s settings, along with the used font and other options.</p>
<aside class="sidebarblock">
<h3>8-bit and 24-bit ANSI color</h3>
<p>Beyond the first sixteen named colors numbered 1 through 16, we arrive in <em>absolute</em> color territory. The color codes from 16 to 255 are used to print 8-bit colors, from which 232 to 255 are grayscale values from black to white.</p>
<div class="literal-block"><pre># prints “hotpink” in #205 (HEX: #f69, RGB: 255, 102, 153)
$ echo -e "\033[38;5;205mhotpink\033[m"</pre></div>
<p>Then, there’s 24-bit color, also named <em>true color</em>, which has 16.777.216 different color values.</p>
<div class="literal-block"><pre># prints “giant goldfish” in 24-bit orange (HEX: #F38630, RGB: 243, 134, 48)
$ echo -e "\033[38;2;243;134;48mgiant goldfish\033[0m"</pre></div>
<p>Being absolute color values, they’re not configurable in the terminal emulator’s settings.</p>
</aside></section>
<section class="doc-section level-1"><h2 id="terminal-themes">Terminal themes</h2><p>By changing the terminal theme, using one like <a href="https://github.com/jeffkreeftmeijer/appsignal.terminal">appsignal.terminal</a> or any of the <a href="https://github.com/lysyi3m/osx-terminal-themes">hundreds</a> of other available themes, the terminal emulator can display the relative colors in any true color value you like. Using <code>#C31633</code> for red will color deletions in git’s diff output in that exact color, for example.</p>
<div class="image-block"><img src="picker.png" alt="Changing the red color in a Terminal.app color theme" width="1382" height="800"></div>
<aside class="admonition-block tip" role="doc-tip"><h6 class="block-title label-only"><span class="title-label">Tip: </span></h6><p>In Terminal.app, use <kbd class="keyseq"><kbd>⌘</kbd>+<kbd>I</kbd></kbd> to open the Inspector to change the current window’s theme without opening a new terminal window.</p></aside>
<p>Setting the precise color values in the terminal emulator’s profile or using a terminal theme allows the utility to mark some output as “yellow”, without having to supply an exact shade. The shade is either up to the terminal or the user’s preferences.</p></section>
<section class="doc-section level-1"><h2 id="vim-color-schemes">Vim color schemes</h2><p>Unlike other utilities, Vim uses 8-bit or 24-bit color schemes that use <em>absolute</em> colors for each highlight group in an attempt to make the colors look the same for every configuration. These schemes don‘t use any of the named colors, so the terminal’s color preferences don‘t affect them.</p>
<p>When using Vim inside a terminal emulator, having consistent colors between Vim and the rest of the terminal requires duplicate color settings. First, the Vim color scheme uses an absolute color value for each highlight group. Then, the terminal emulator needs a theme that uses the same colors as the Vim scheme to customize the relative colors.</p>
<p>If the Vim color scheme uses <code>#C31633</code> as a red color, the terminal theme needs to use that color as the “Red” ANSI color to use that same color in git’s diffs outside of Vim, for example.</p>
<section class="doc-section level-2"><h3 id="dim-a-16-color-vim-color-scheme">Dim: a 16-color Vim color scheme</h3><p>To achieve consistent colors across all terminal utilities without requiring duplicate color settings, 4-bit Vim color schemes like <a href="https://github.com/noahfrederick/vim-noctu">Noctu</a> and <a href="https://github.com/jeffkreeftmeijer/vim-dim">Dim</a> exclusively use the first sixteen relative ANSI colors. This makes them compatible with 16-color terminals, but also results in consistent colors between terminal utilities.</p>
<p>Dim is based on Vim’s default color scheme. Although Vim’s default mostly uses relative colors, it uses 8-bit absolute colors for some of its highlight groups. By default, it colors line numbers and statements brown, diffs lightblue and darkblue, completion menus pink, and comments ANSI blue.
Because that’s distracting, Dim uses gray colors for each of these.</p>
<figure class="image-block"><img src="compare.png" alt="Vim’s default color scheme compared to Dim" width="1447" height="800">
<figcaption>Figure 2. Vim’s default color scheme (left) and Dim, both with appsignal.terminal as the terminal theme. Dim has dimmed colors for secondary features like completion menus, line numbers and folds.</figcaption></figure>
<p>By keeping the intent separate from the styling and the specific color values in the terminal theme, every utility in the terminal uses consistent colors. This makes changing themes—like switching between dark and light versions of a theme—a matter of pressing <kbd class="keyseq"><kbd>⌘</kbd>+<kbd>I</kbd></kbd> and selecting another one, without having to find a matching color scheme for Vim.</p></section></section>
      ]]>
    </content>
  </entry>
  <entry>
    <title type="html">Find, convert and replace dates with Vim substitutions</title>
    <link href="https://jeffkreeftmeijer.com/vim-reformat-dates/"/>
    <id>https://jeffkreeftmeijer.com/vim-reformat-dates/</id>
    <published>2017-10-17T00:00:00+00:00</published>
    <updated>2018-06-05T18:32:09+02:00</updated>
    <summary>By using the date utility from a substitution, Vim can convert all dates in a file to a different format and replace them all at once.</summary>
    <content type="html">
      <![CDATA[
      <section id="preamble" aria-label="Preamble"><p>Vim&#8217;s substitution command is a powerful way to make changes to text files.
Besides finding and replacing text using regular expressions, substitutions can
call out to external programs for more complicated replacements. By using the
<code>date</code> utility from a substitution, Vim can convert all dates in a file to a
different format and replace them all at once.</p>
<div class="imageblock">
<div class="content">
<img src="https://jeffkreeftmeijer.com/vim-reformat-dates/substitute.png" alt="Finding, converting and replacing dates with Vim substitutions" width="746" height="581">
</div>
</div>
<p>The <em>input file</em> is an HTML page with a list of articles. Each article includes
a <code>&lt;time&gt;</code> tag with a value and a datetime attribute to show the publication
date.</p>
<figure class="listing-block"><figcaption>The input file</figcaption>
<pre class="highlight"><code class="language-html" data-lang="html">&lt;article&gt;
  &lt;h1&gt;Keeping open source projects maintainable&lt;/h1&gt;
  &lt;time datetime="2017-09-19"&gt;2017-09-19&lt;/time&gt;
&lt;/article&gt;

&lt;article&gt;
  &lt;h1&gt;Property-based testing in Elixir using PropEr&lt;/h1&gt;
  &lt;time datetime="2017-08-22"&gt;2017-08-22&lt;/time&gt;
&lt;/article&gt;

&lt;article&gt;
  &lt;h1&gt;git is not a git command&lt;/h1&gt;
  &lt;time datetime="2015-10-01"&gt;2015-10-01&lt;/time&gt;
&lt;/article&gt;

...</code></pre></figure>
<p>We need to convert the dates&#8217; values to a friendlier format that
includes the full month name (&#8220;September 19, 2017&#8221;), while keeping the
datetime attributes in their current format.</p>
<figure class="listing-block"><figcaption>The result: articles with reformatted dates</figcaption>
<pre class="highlight"><code class="language-html" data-lang="html">&lt;article&gt;
  &lt;h1&gt;Keeping open source projects maintainable&lt;/h1&gt;
  &lt;time datetime="2017-09-19"&gt;September 19, 2017&lt;/time&gt;
&lt;/article&gt;

&lt;article&gt;
  &lt;h1&gt;Property-based testing in Elixir using PropEr&lt;/h1&gt;
  &lt;time datetime="2017-08-22"&gt;August 22, 2017&lt;/time&gt;
&lt;/article&gt;

&lt;article&gt;
  &lt;h1&gt;git is not a git command&lt;/h1&gt;
  &lt;time datetime="2015-10-01"&gt;October 01, 2015&lt;/time&gt;
&lt;/article&gt;

...</code></pre></figure>
<p>The input file has more than forty articles, so replacing them all by hand
would be a lot of error-prone work. Instead, we write a substitution that
finds all dates in the file and replaces them with a reformatted value.</p></section>
<section class="doc-section level-1"><h2 id="finding-the-dates">Finding the dates</h2><p>The first step in replacing the dates is finding where they are in the input
file and making sure not to match the ones in the datetime attributes.</p>
<aside class="sidebarblock">
<h3>Finding patterns</h3>
<p>Vim searches for text by pressing <kbd>esc</kbd> to get to normal mode, then
<kbd>/</kbd>, followed by a <em>search pattern</em>. Type <kbd>esc</kbd> <code>/2017</code> to find all
occurrences of "2017" in a file.</p>
<p>The dot (<code>.</code>) is a wildcard that matches any single character. Searching for
<code>20..</code> (<kbd>esc</kbd> <code>/20..</code>) matches &#8220;2017&#8221;, but also &#8220;2015&#8221;, &#8220;2078&#8221;,
&#8220;20a%&#8221;, and &#8220;20°c&#8221;.</p>
</aside>
<p>To find all dates in the file, we could use <code>....-..-..</code> (<kbd>esc</kbd>
<code>/....-..-..</code>) as our search pattern to match the date format. However, this
pattern&#8217;s results will include all matching dates in the file, including the
ones in the <code>&lt;time&gt;</code> tags&#8217; datetime attributes.</p>
<div class="listing-block"><pre class="highlight"><code class="language-html" data-lang="html">&lt;time datetime="2017-09-19"&gt;2017-09-19&lt;/time&gt;</code></pre></div>
<p>In the input file, all <code>&lt;time&gt;</code> values are immediately followed by the
less-than sign from the closing <code>&lt;/time&gt;</code> tag. To prevent the datetimes from
the attributes to be included in the results, we could include the less-than
sign in the search pattern and make sure to add it back when replacing.</p>
<div class="literal-block"><pre>....-..-..&lt;</pre></div>
<p>Hoever, Vim supports setting the start and end of the match in the search
pattern using the <code>\zs</code> and <code>\ze</code> pattern atoms. By prefixing the <code>&lt;</code> in our
search pattern with <code>\ze</code>, the pattern finds all dates followed by a less-than
sign, but doesn&#8217;t include it in the match, meaning it won&#8217;t be replaced.</p>
<div class="literal-block"><pre>....-..-..\ze&lt;</pre></div></section>
<section class="doc-section level-1"><h2 id="reformatting-dates-from-the-command-line">Reformatting dates from the command line</h2><p>We need the month&#8217;s full name in the date replacements, so we can&#8217;t reorder the
input value (&#8220;2017-09-19&#8221;) to get the result we want. Instead, we need to
call out to an external utility that knows month names and can convert between
date formats.</p>
<aside class="sidebarblock">
<h3>The <code>date</code> utility</h3>
<p>The <code>date</code> utility returns the current date and time. The desired <em>output
format</em> is passed in through a trailing argument that starts with a plus sign.
It needs to be wrapped in quotes if it contains any whitespace.</p>
<div class="literal-block"><pre>$ date
Thu Oct 17 09:41:10 CEST 2017
$ date +%Y-%m-%d
2017-10-17
$ date +"%B %d, %Y"
October 17, 2017</pre></div>
<p>On macOS (or other derivatives of BSD) passing a date to the <code>date</code> utility
overwrites the system date unless the <code>-j</code> flag is passed. With that flag, the
utility allows passing a test date to be reformatted. The test date needs to be
formatted as <code>[[[mm]dd]HH]MM[[cc]yy][.ss]</code> by default or we can pass a custom
<em>input format</em> with <code>-f</code>.</p>
<div class="literal-block"><pre>$ date -j110200361991.35
Sat Nov  2 00:36:35 CET 1991
$ date -jf %Y-%m-%d 1991-11-02
Sat Nov  2 09:41:27 CET 1991</pre></div>
<p>GNU <code>date</code> uses the <code>--date</code> argument to pass in dates, and it figures out the
input format on its own.</p>
<div class="literal-block"><pre># date --date=1991-11-02
Sat Nov  2 00:00:00 UTC 1991</pre></div>
<p>By setting the input and output format, we can use the <code>date</code> utility to
reformat dates.</p>
<div class="literal-block"><pre>$ date -jf %Y-%m-%d 1991-11-02 +"%B %d, %Y" # BSD
November 02, 1991</pre></div>
<div class="literal-block"><pre># date --date=1991-11-02 +"%B %d, %Y" # GNU
November 02, 1991</pre></div>
</aside>
<p>We reformat each match of our search pattern to our desired format (&#8220;September
19, 2017&#8221;) with the <code>date</code> utility. We use <code>"%Y-%m-%d"</code> as the <em>input format</em>
to match the results from the search pattern. The <em>output format</em> is <code>"%B %d,
%Y"</code> to produce the month&#8217;s full name, the date&#8217;s number, a comma and the year
number.</p>
<p>With these formats the <code>date</code> utility reformats <code>1991-11-02</code> to <code>November 02,
1991</code>.</p>
<div class="literal-block" id="date-command"><pre>$ date -jf "%Y-%m-%d" "1991-11-02" +"%B %d, %Y"
November 02 1991</pre></div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>-j</code></dt>
<dd>
<p>Don&#8217;t try to set the system date</p>
</dd>
<dt class="hdlist1"><code>-f "%Y-%m-%d"</code></dt>
<dd>
<p>Use the passed input format instead of the default. In this case <code>"%Y-%m-%d"</code>
to match the input format (<code>1991-11-02</code>).</p>
</dd>
<dt class="hdlist1"><code>"1991-11-02"</code></dt>
<dd>
<p>An example date to be parsed using the input format passed to <code>-f</code>.</p>
</dd>
<dt class="hdlist1"><code>+"%B %d, %Y"</code></dt>
<dd>
<p>The output format, which produces <code>November 02, 1991</code>.</p>
</dd>
</dl>
</div></section>
<section class="doc-section level-1"><h2 id="calling-out-to-external-utilities-from-substitutions">Calling out to external utilities from substitutions</h2><p>We know how to find all dates in the file, and how to convert a date to another
format from the command line. To replace all found dates with a reformatted
version from the <code>date</code> utility, we need to run an <em>expression</em> from a
<em>substitution</em>.</p>
<aside id="substitutions" class="sidebarblock">
<h3>Substitutions</h3>
<p>Vim&#8217;s substitutions can find and replace text. To replace &#8220;November&#8221; with
&#8220;October&#8221; throughout a file, we execute a substitution where the pattern
is <code>November</code> and the <em>substitute string</em> is <code>October</code>.</p>
<div class="literal-block"><pre>:%s/November/October/gc</pre></div>
<aside class="admonition-block note" role="note"><h6 class="block-title label-only"><span class="title-label">Note: </span></h6><p>Options can be passed after the last slash. In this case, we use
<code>g[lobal]</code> to make the substitution <em>global</em>, meaning it will replace all
occurrences of the pattern in the file. The second option is <code>c[onfirm]</code>, which
will ask for confirmation before executing each substitution.</p></aside>
</aside>
<p id="hardcoded-substitution">Using the search pattern we prepared earlier, we can find and replace all date
values from the input file with a substitution. For example, we could overwrite
all dates with a hardcoded value:</p>
<div class="literal-block"><pre>:%s/....-..-..\ze&lt;/November 2, 1991/gc</pre></div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>....-..-..</code></dt>
<dd>
<p>The <a href="#finding-the-dates">search pattern</a> to find all dates in the file.</p>
</dd>
<dt class="hdlist1"><code>November 2, 1991</code></dt>
<dd>
<p>The literal substitute string to replace the dates with a hardcoded one.</p>
</dd>
</dl>
</div>
<p>Instead of inserting a hardcoded substitute string, we need to run an
expression for each match to get its replacement.</p>
<aside class="sidebarblock">
<h3>Expressions</h3>
<p>When a substitute string starts with <code>\=</code>, Vim evaluates it as an expression.</p>
<p>We can call Vim&#8217;s built in functions from an expression. To replace all numbers
in a file with the number of the line they&#8217;re on, we use the <code>line()</code> function
from an expression in the substitute string.</p>
<div class="literal-block"><pre>%s/\d\+/\=line('.')/gc</pre></div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>\d\+</code></dt>
<dd>
<p>The pattern to match all numbers (<code>\d</code>) in the file. Multi-digit numbers (42,
785, 14281) are matched as one number by using <code>\+</code>.</p>
</dd>
<dt class="hdlist1"><code>\=line('.')</code></dt>
<dd>
<p>The substitute string with an expression (<code>\=</code>) to call the <code>line()</code>
function. Passing <code>'.'</code> as the function&#8217;s argument returns the current cursor
position, which is used to replace the match.</p>
</dd>
</dl>
</div>
<p>Vim provides the <code>system()</code> function to call out to an external command and use
the result as the replacement string. To replace all numbers in a file with a
random number, we call <code>echo -n $RANDOM</code> with the <code>system()</code> function.</p>
<div class="literal-block"><pre>:%s/\d\+/\=system('echo -n $RANDOM')/gc</pre></div>
</aside>
<p>We use the <code>system()</code> function from an expression (<code>\=</code>) to call out to the
<code>date</code> utility. Sticking with hardcoded dates for now, we can use the utility
to convert a date&#8217;s format from &#8220;1991-11-02&#8221; to &#8220;November 2, 1991&#8221; before
inserting it into the file:</p>
<div class="literal-block"><pre>:%s/....-..-..\ze&lt;/\=system('date -jf "%Y-%m-%d" "1991-11-02" +"%B %d, %Y"')/gc</pre></div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>....-..-..\ze&lt;</code></dt>
<dd>
<p>The <a href="#finding-the-dates">search pattern</a> to find all dates in the file.</p>
</dd>
<dt class="hdlist1"><code>\=system('date &#8230;&#8203;')</code></dt>
<dd>
<p>An expression that uses the <code>system()</code> function to execute an external
command and returns its value as the substitute string.</p>
</dd>
<dt class="hdlist1"><code>'date -jf "%Y-%m-%d" "1991-11-02" +"%B %d, %Y"'</code></dt>
<dd>
<p>The <a href="#date-command">date command</a> as a string, with a hardcoded date
(<code>"1991-11-02"</code>) as its input date argument. This date matches the format of
the search pattern&#8217;s matches.</p>
</dd>
</dl>
</div>
<section class="admonition-block warning" role="doc-notice"><h6 class="block-title label-only"><span class="title-label">Warning: </span></h6><p>This substitution produces a newline before the <code>&lt;time&gt;</code> tag, because
         the <code>date</code> utility appends one to its output. We&#8217;ll remove these later
         while discussing <a href="#nested-substitutions">nested substitutions</a>.</p></section>
<p>The replacement value is still hardcoded (&#8220;1991-11-02&#8221;), so this substitution
will overwrite all date values in the file to a date in 1991. To put the
matched date values back in the file, we need to pass them to the date command.</p>
<aside class="sidebarblock">
<h3>Submatches</h3>
<p>Vim&#8217;s <code>submatch()</code> function returns matches from our pattern. If we call it
with <code>0</code> as its argument, it will return the whole match instead of a submatch.
To wrap each occurrence of &#8220;October&#8221; in brackets, we use <code>[\0]</code> as the
substitute string.</p>
<div class="literal-block"><pre>:%s/October/[\0]/gc</pre></div>
<p>In an expression, submatches can be included using the <code>submatch()</code> function.</p>
<div class="literal-block"><pre>:%s/October/\='['.submatch('0').']'/gc</pre></div>
</aside>
<p>To pass the matched date to the call to <code>date</code> in our expression, we need to
break out of the string passed to the <code>system()</code> function and replace the
hardcoded date with a call to <code>submatch(0)</code> to insert the whole match.</p>
<div class="literal-block"><pre>:%s/....-..-..\ze&lt;/\=system('date -jf "%Y-%m-%d" "'.submatch(0).'" +"%B %d, %Y"')/gc</pre></div>
<p>Running this substitution will turn all <code>&lt;time&gt;</code> tags from the input file to
our desired format, but it puts a newline before the closing <code>&lt;/time&gt;</code> tag.</p>
<figure class="listing-block"><figcaption>The current result, with an added newline before the closing <code>&lt;/time&gt;</code> tag</figcaption>
<pre class="highlight"><code class="language-html" data-lang="html">&lt;article&gt;
  &lt;h1&gt;Keeping open source projects maintainable&lt;/h1&gt;
  &lt;time datetime="2017-09-19"&gt;September 19, 2017
&lt;/time&gt;
&lt;/article&gt;

...</code></pre></figure></section>
<section class="doc-section level-1"><h2 id="nested-substitutions">Nested substitutions</h2><p>A newline is appended to the result of the <code>date</code> command, which ends up in the
file after running the substitution. Since there&#8217;s no way to get the date
command to omit the newline, we need to take it out ourselves.</p>
<p>We can run a second substitution to remove them after running the first one:</p>
<div class="literal-block"><pre>:%s/\n&lt;\/time&gt;/&lt;\/time&gt;/g</pre></div>
<p>To keep the original substitution from adding newlines in the first place, we
can pipe the result from the <code>date</code> command to <code>tr</code> to remove the newline with
the <code>-d</code> argument:</p>
<div class="literal-block"><pre>:%s/....-..-..\ze&lt;/\=system('date -jf "%Y-%m-%d" "'.submatch(0).'" +"%B %d, %Y" | tr -d "\n"')/gc</pre></div>
<p>Another option is to take the newline out with a <em>nested substitution</em>.</p>
<aside class="sidebarblock">
<h3>The <code>substitute()</code> function</h3>
<p>Vim&#8217;s <code>substitute()</code> function replaces strings and can be run from an
expression in a substitution. Nested substitutions are useful for transforming
the result of another function.</p>
<p>The function (<code>substitute()</code>) works like the substitute command (<code>:s</code>), and
takes the same arguments, so <code>substitute("input", "find", "replace", "g")</code> is
equivalent to running <code>:%s/find/replace/g</code> in a file.</p>
<p>The <code>substitute()</code> function works like the substitute command (<code>:s[ubstitute]</code>)
in Vim&#8217;s command line and takes the same arguments. The first argument is the
input, then the search pattern, the substitute string, followed by optional
options. <code>substitute("input", "find", "replace", "g")</code> is equivalent to running
<code>:%s/find/replace/g</code> in a file.</p>
<div class="literal-block"><pre>:echom substitute("October 02, 1991", "October", "November", "")</pre></div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>"October 02, 1991"</code></dt>
<dd>
<p>The input string to run the substitution on.</p>
</dd>
<dt class="hdlist1"><code>"October"</code></dt>
<dd>
<p>The search pattern.</p>
</dd>
<dt class="hdlist1"><code>"November"</code></dt>
<dd>
<p>The substitute string.</p>
</dd>
<dt class="hdlist1"><code>""</code></dt>
<dd>
<p><a href="#substitutions">Options</a>, like in a &#8220;regular&#8221; substitution. This example
doesn&#8217;t use the <code>g</code> option because we&#8217;re sure there&#8217;s only one match in the
input string, so it isn&#8217;t necessary.</p>
</dd>
</dl>
</div>
<p>If an external command called from a substitution returns a trailing newline
(like <code>echo</code> would without the <code>-n</code> flag), we can use the <code>substitute()</code>
function to take it out before the match is replaced.</p>
<div class="literal-block"><pre>:%s/October/\=substitute(system('echo "November"'), "\n", "", "")/gc</pre></div>
</aside>
<p>We wrap the call to the <code>date</code> utility in a nested substitution using the
<code>substitute()</code> function. It takes the result, matches the newline (<code>"\n"</code>) and
replaces it with an empty string.</p>
<div class="literal-block"><pre>:%s/....-..-..\ze&lt;/\=substitute(system('date -jf "%Y-%m-%d" "'.submatch(0).'" +"%B %d, %Y"'), "\n", "", "")/gc</pre></div>
<p>Now our substitution will turn the <code>&lt;time&gt;</code> tags into the correct format,
without adding that extra newline.</p>
<figure class="listing-block"><figcaption>The result</figcaption>
<pre>&lt;article&gt;
  &lt;h1&gt;Keeping open source projects maintainable&lt;/h1&gt;
  &lt;time datetime="2017-09-19"&gt;September 19, 2017&lt;/time&gt;
&lt;/article&gt;

&lt;article&gt;
  &lt;h1&gt;Property-based testing in Elixir using PropEr&lt;/h1&gt;
  &lt;time datetime="2017-08-22"&gt;August 22, 2017&lt;/time&gt;
&lt;/article&gt;

&lt;article&gt;
  &lt;h1&gt;git is not a git command&lt;/h1&gt;
  &lt;time datetime="2015-10-01"&gt;October 01, 2015&lt;/time&gt;
&lt;/article&gt;

...</pre></figure>
<p><span class="small"><em>Thanks Wouter Vos and Rico Sta. Cruz for feedback on the substitution command
styling, u/Vurpius for suggesting <code>\ze</code> and Ben Sinclair for suggesting piping
through <code>tr</code>.</em></span></p></section>
      ]]>
    </content>
  </entry>
</feed>
