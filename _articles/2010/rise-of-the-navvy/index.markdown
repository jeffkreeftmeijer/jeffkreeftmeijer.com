<p>It all started on a cold winter’s day in December of 2009 as I decided to start a personal project using <a href="http://mongomapper.com">MongoMapper</a>, which needed to run background jobs.</p>
<p>Back then, <a href="http://twitter.com/collectiveidea" title="Collective Idea">@collectiveidea</a>‘s <a href="http://github.com/collectiveidea/delayed_job">delayed_job fork</a> was still tightly mingled with <a href="http://api.rubyonrails.org/classes/ActiveRecord/Base.html">ActiveRecord</a>, so I couldn’t just pop that in as I normally would. After failing to find good alternatives I stumbled upon <a href="http://twitter.com/zbelzer" title="Zach Belzer">@zbelzer</a>’s <a href="http://github.com/zbelzer/delayed_job">fork</a> in which he did an <a href="http://github.com/zbelzer/delayed_job/commit/1ad8eab91786f262f4d4bfeab0a76c1517c06e7e">“initial attempt at MongoDB support”</a>. I decided to go with that.</p>
<p>I found a couple of problems with Zach’s fork — it was based on <a href="http://twitter.com/tobi" title="Tobias Lütke">@tobi</a>‘s <a href="http://github.com/tobi/delayed_job">original delayed_job</a> to name one — , so I created a Mongo based fork based on Zach’s work myself.</p>
<p>While working on that, it didn’t take me long to realize that I was rewriting stuff I’d never really need to use. So, I decided to create a simple, database agnostic background job processor myself and I called it <a href="http://jeffkreeftmeijer.com/navvy">Navvy</a>.</p>
<p><object width="450" height="360"><br><param name="movie" value="http://www.youtube.com/v/5CU7oAS2XkY&amp;hl=en_US&amp;fs=1&amp;">
<br><param name="allowFullScreen" value="true">
<param name="allowscriptaccess" value="always">
<br><embed src="http://www.youtube.com/v/5CU7oAS2XkY&amp;hl=en_US&amp;fs=1&amp;" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="450" height="260"></embed><br></object></p>
<blockquote>
<p>Navvy is a shorter form of navigator (UK) or navigational engineer (<span class="caps">USA</span>) and is particularly applied to describe the manual labourers working on major civil engineering projects.<br>
— <a href="http://en.wikipedia.org/wiki/Navvy">Wikipedia</a></p>
</blockquote>
<p>I initially built Navvy with MongoMapper and ActiveRecord adapters, but <a href="http://twitter.com/antekpiechnik" title="Antek Piechnik">@antekpiechnik</a> came out of nowhere and created an adapter for <a href="http://sequel.rubyforge.org/">Sequel</a>. In the spirit of the <a href="http://railsbridge.org/news_items/10">January 16 and 17 Bugmash</a>, <a href="http://twitter.com/matsimitsu" title="Robert Beekman">@matsimitsu</a> and I jumped in to get the whole thing up to speed with Rails 3.</p>
<h3>“Aren’t you the guy who built Navvy?”</h3>
<p>After <a href="http://www.rubyflow.com/items/3280">announcing</a> it, it didn’t take long before <a href="http://ruby5.envylabs.com/episodes/45-episode-43-january-19-2010/stories/350-navvy-database-agnostic-background-jobs">Ruby5</a> picked it up and people started actually using it. It was great to hear that <a href="http://twitter.com/jnunemaker/status/7996463096" title="John Nunemaker">@jnunemaker</a> decided to use Navvy in <a href="http://harmonyapp.com">Harmony</a>.</p>
<p><a href="http://thechangelog.com/post/356754061/navvy-simple-database-agnostic-ruby-background-job-proce">The Changelog</a> did a post on Navvy, which meant it became a featured repo on <a href="http://github.com/explore">Github Explore</a> for about a week, John gave another hat tip on <a href="http://thechangelog.com/post/360070705/episode-0-1-1-john-nunemaker-from-mongomapper">Episode 0.1.1 of the Changelog</a> and more and more people started <a href="http://wiki.github.com/jeffkreeftmeijer/navvy/contributors">contributing</a>.</p>
<p>Thanks to everyone who helped build, fix bugs and get the word out about the project. It was a crazy ride and I can never get enough of the “Aren’t you the guy who built Navvy?”-question. Feels good, thanks.</p>
<h3>Future</h3>
<p><a href="http://thechangelog.com/post/495099940/delayed-job-hits-2-0">delayed_job 2</a> got released a while back adding support for multiple backends. Although database agnosticism was the first and most important goal for Navvy, I think there’s still a place for both, since there are still some cool things in Navvy (You can <a href="http://wiki.github.com/jeffkreeftmeijer/navvy/installation-usage-in-pure-ruby">use it in pure Ruby</a> for example).</p>
<p>Today, Navvy has a <a href="http://datamapper.org/">DataMapper</a> adapter, job priorities, the ability to retry failed jobs and it’s own daemon. It’s been a bit quiet around Navvy for the last couple of weeks, but I’ve been working on a <a href="http://github.com/jeffkreeftmeijer/navvy/commits/feature/mongoid">Mongoid adapter</a> with <a href="http://twitter.com/tomk32" title="Thomas R. Koll">@TomK32</a>, together with some other stuff that I hope to release soon.</p>
<p>I’m excited to continue working on Navvy. Stay tuned!</p>