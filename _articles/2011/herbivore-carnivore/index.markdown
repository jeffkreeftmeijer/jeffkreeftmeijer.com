<p>At the <a href="http://80beans.com">80beans</a> / <a href="http://amsterdam-rb.org">Amsterdam.rb</a> new years event, I gave a short presentation about acceptance testing named &#8220;Herbivore / Carnivore&#8221;.</p>
<p><a href="http://jeffkreeftmeijer.github.com/herbivore_carnivore"><img src="http://jeffkreeftmeijer.com/images/herbivore_carnivore.png" alt=""></a></p>
<p>As a happy <a href="https://github.com/cavalle/steak">Steak</a> user, I wanted to talk about how it could free you from your horrible problems with <a href="http://cukes.info/">Cucumber</a> and make you a better and more efficient programmer. But during my research, finding bad things to say about Cucumber proved more difficult than I thought, especially after talking to a bunch of Cucumber users that explained why it works the way it does and cleared some of my misconceptions.</p>
<p>Using my new Cucumber knowledge, I turned my presentation around from explaining <em>why</em> I think you should use a tool like Steak to <em>when</em> I think you should use a tool like Steak. I did this because I think a lot of people just choose between testing in English or Ruby and stick to that, no matter what the next project or situation is.</p>
<p>Instead of trying to convince everyone that writing tests in English is overkill, I tried to explain what a great tool Cucumber is when you&#8217;re actually using it as a communication tool. Because, let&#8217;s be honest, You can&#8217;t let your clients read code, no matter how readable you think it is. You&#8217;re a programmer. If you want to write stories together with your client and keep them involved in the process you <em>need</em> some kind of <a href="http://www.martinfowler.com/bliki/BusinessReadableDSL.html">business readable <span class="caps">DSL</span></a> to allow you to write stories in a language everybody involved can understand. That language is <em>not</em> Ruby (in most cases).</p>
<p>In situations where you can&#8217;t get the client involved and you find yourself being the only one writing and reading the English stories, Steak might be a great solution. It&#8217;s a simple RSpec extension that adds just enough code to allow you to do acceptance testing in Ruby, without the extra complexity or overhead. I&#8217;m not going to explain Steak here, I wrote <a href="http://jeffkreeftmeijer.com/2010/steak-because-cucumber-is-for-vegetarians/">an article about it</a> a couple of moths back.</p>
<p>So, why is Cucumber the most used acceptance testing library while most projects, clients and teams don&#8217;t really <em>need</em> English tests? Shouldn&#8217;t we add less complexity when we don&#8217;t need it?</p>
<p>I ended my presentation with a question I think all Cucumber users should ask themselves every once in a while: &#8220;Do you benefit from writing tests in English?&#8221;. Do you <em>use</em> the tests as executable documentation and as a communication tool? If your answer is yes, keep doing what you&#8217;re doing. Otherwise, Steak might be a good tool for you.</p>
<p>I would love to hear your thoughts on this. Here are <a href="http://jeffkreeftmeijer.github.com/herbivore_carnivore">my slides</a> if you want to give them another look. Also, here&#8217;s <a href="http://iain.nl/2011/01/cucumber-vs-steak/">a great article</a> by <a href="http://twitter.com/iain_nl" title="Iain Hecker">@iain_nl</a> about Steak and Cucumber.</p>