<p>I talked about this with a bunch of people at <a href="http://jeffkreeftmeijer.com/2010/rubyandrails-2010/">RubyAndRails 2010</a> a couple of months back, but never found the time to write it down.</p>
<p>In <a href="http://en.wikipedia.org/wiki/Test-driven_development" title="Test Driven Development"><span class="caps">TDD</span></a>, we use a very short development cycle to get something to work. We write a test, watch it fail, implement the feature and watch it pass. Then we move on to a new test. Simple.</p>
<p>But, to be able to write a test, we need some information to start out with. Most of the time, we probably have that information already. You know your stuff good enough to be able to write tests <em>before</em> doing anything else.</p>
<p><img src="http://jeffkreeftmeijer.com/images/trex.jpg" alt=""><br><span class="small">Seriously, stop it. Or <span class="caps">TDD</span> rex will eat you.</span></p>
<p>But sometimes you&#8217;re working on something you don&#8217;t have any experience with in a library you never worked on before. And you don&#8217;t know what code you need to write, meaning you can&#8217;t write any tests for it. What now?</p>
<p>You dive in and write a prototype. You don&#8217;t worry about tests or clean code, you just hack until the thing works exactly how you like it. It probably won&#8217;t take you long before you have something that does what you need. You show your friends and co-workers and they tell you you did an awesome job.</p>
<p>You&#8217;re eager to get your library out there, but you remember everybody screaming you should write tests &#8220;all the fucking time&#8221;. So, for that reason, you dive in once again and slap some tests on your new library. Now it&#8217;s tested and your work is done. The last thing you need to do is think of some fun, <a href="http://twitter.com/alloy/status/26996675729948672">mildly sexual</a> name before releasing it.</p>
<h3>No, no, no, no, no, no, no!</h3>
<p>Building that prototype helped you to figure out what needed to happen and what the nicest implementation of your feature was. You didn&#8217;t worry about writing tests or clean code, you just wrote the feature.</p>
<p>After that you&#8217;re quite proud of your work and there doesn&#8217;t seem to be anything wrong with it. So, you decided to add some tests. More often than not, this leads to poorly tested code.</p>
<p>Doing <span class="caps">TDD</span>, you would have written as little code as you needed to get your test to pass. When writing your implementation first, chances are you wrote more code than you actually needed. Even if you completely test this extra code afterwards, it still adds bloat to your library. Besides that, unless you&#8217;ve seen your test fail, how do you know if it works?</p>
<p>I believe you should&#8217;ve thrown the prototype out and started over using the new knowledge you gained from creating it. You probably learned enough about the existing code and your implementation to be able to write proper tests.</p>
<p>So, instead of throwing tests on prototypes, let&#8217;s try to throw our prototypes out and start over. Yes, this takes way longer, but I know your clean, stable and maintainable implementation will make up for that.</p>